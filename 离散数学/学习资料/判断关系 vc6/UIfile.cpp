//////////////////////////////////////////////////////////////////////////
//
// FileName : UIfile.cpp
// Creator  : wdx
// Date     : 2010.04.12
// Comment  : To make it easy to control the UI
//
//////////////////////////////////////////////////////////////////////////

#include "main.h"

void welcome(void){
	cout << TITLE
		<< "*************************************************************************\n"
		<< "      ★★内附帮助文档，请初次使用者阅读，不然不会用可不赖我★★\n"
		<< "            ☆☆想要看帮助的话，在下个页面输入a就好☆☆\n\n"
		<< " ① 提供了六种关系判断：自反，非自反，对称，非对称，反对称，传递\n"
		<< " ② 提供了两个矩阵相乘的逻辑运算\n"
		<< " ③ 提供两个复数的加、减、乘运算\n"
		<< " ④ 提供解线性方程组的运算\n"
		<< "*************************************************************************\n"
		<< "             有任何想要添加的功能或是bug报告，请用各种方式知会我。\n"
		<< "                    E-mail: dacrocodilee@gmail.com\n"
		<< "                        MSN: wdxtub@live.cn\n"
		<< "                           QQ: 649855298\n\n"
		<< "                       made by wdx 2010.04.12\n"
		<< "                        任何人均可以免费使用。\n";
	system("pause");
}

void welcomeScreen1(void){
	system("cls");
	cout << TITLE
		<< "*******************************************************************\n"
		<< "                            功能选择\n"
		<< endl
		<< "                  1: 计算单一矩阵的各种关系。\n"
		<< "                  2: 计算矩阵的逻辑相乘。\n"
		<< "                  3: 计算复数的各种运算(加、减、乘)。\n"
		<< "                  4: 求多元方程组的解(利用矩阵)。\n"
		<< "                  5: 求解矩阵的自反闭包，对称闭包，传递闭包。\n"
		<< endl
		<< "                  a: 帮助文档(强烈建议初次使用者阅读)。\n"
		<< "                  b: 关于此软件(简介，更新)。\n"
		<< "                  c: 关于作者。\n"
		<< "                  d: 致谢。\n"
		<< endl
		<< "                  t: 俄罗斯方块游戏。\n"
		<< "                  e: 退出。\n"
		<< "*******************************************************************\n"
		<< "请输入所需要的数字或字母并按回车键确认(别输入多个，不然就...)。\n";
	char i;
	cout << "输入你需要做的事情的编号: ";
	cin >> i;
	if (i == '1' || i == '2' || i == 'a' || i == 'b' || i == '3' || 
		i == '4' || i == 'c' || i == 'd' || i == '5' || i == 'e' || i == 't')
	{
		switch (i)
		{
		case '1':{judgeRelation();break;}
		case '2':{mtxCalculate();break;}
		case '3':{complexCal();break;}
		case '4':{solveEquation();break;}
		case '5':{closureCal();break;}
		case 't':{Tetris();break;}
		case 'b':{upgradeInfor();break;}
		case 'a':{helpDocSelect();break;}
		case 'c':{aboutMe();break;}
		case 'd':{thankList();break;}
		case 'e':{end();break;}
		}
	}
	else
	{
		cout << "\n你乱来了，别这样。上面有的数字才能输入。\n";
		system("pause");
		
		welcomeScreen1();
	}
	
}

void upgradeInfor(void){
	system("cls");
	cout << TITLE
		<< "*******************************************************************\n"
		<< "                              关于本软件\n"
		<< "    最开始其实就是离散老师说的一个课外作业，后来就有想把它拓展成为\n"
		<< "一个多功能实用的小程序，每次的更新基本上就是因为学了新东西或作业出\n"
		<< "现问题需要改进。开发语言:C++。开发环境:VC6。\n"
		<< "*******************************************************************\n"
		<< "                               更新历史: \n"
		<< "◎ V1.0.0  最初的版本，只有前五项判断功能。(100325)\n"
		<< "◎ V1.1.0  加入了传递关系的判断，但是算法有误，会导致某些矩阵判断错误。\n"
		<< "◎ V1.2.0  更新了算法，优化了显示界面。\n"
		<< "◎ V1.3.0  再次更新了反对称和非对称的算法，加入等价关系的判断，用布尔\n"
		<< "           作为返回值并且取消了单个输入改为整行输入，提升用户体验。\n"
		<< "◎ V1.4.0  添加了显示互补矩阵和逆矩阵的显示，提示语言修改为中文，大幅\n"
		<< "           更新了传递关系的判断算法，减小了体积。\n"
		<< "◎ V1.4.1  一个很小的算法和结构的修改，提高了整个程序的整合度。\n"
		<< "◎ V1.4.2  把所有功能模块化了，修改了显示逻辑，减小了体积。\n\n"
		<< "◎ V2.0.0  改变了整个框架，增添了计算矩阵逻辑乘积的功能。\n"
		<< "◎ V2.1.0  加入了计算复数的功能。\n"
		<< "◎ V2.2.0  加入了计算多元方程组的功能，也许求解有错，请注意。\n"
		<< "           更名为 *数学计算实用程序* 。\n\n"
		<< "◎ V2.2SP  特别为Ubuntu移植的版本，linux的系统通用，mac未知。\n\n"
		<< "◎ V3.0.0  加入了帮助文档，方便初次使用的时候不至于手足无措。更新了显\n"
		<< "           示界面。初次文档比较简单。(100411)\n"
		<< "◎ V3.1.0  更新帮助文档，添加更新日期，加入闭包计算。(100412)\n"
		<< "◎ V3.2.0  添加了俄罗斯方块游戏，这是一次无聊的更新。(100415)\n"
		<< "◎ V3.2.1  修正了选择功能时输入其他字符后出现的问题，感谢“呆.”提交\n"
		<< "           的bug。\n"
		<< "◎ V3.3.0  加入了判断偏序的功能。\n"
		<< endl;
	system("pause");
	welcomeScreen1();
} 

void end(){
	system("cls");
	cout << TITLE
		<< "*******************************************************************\n";
	cout << "感谢您的使用!\n"
		 << "感谢所有为本程序测试和提出建议的人!\n"
		 << "如果你喜欢本程序，可以捐助我的，真的。\n";
	system("pause");
	exit(1);
}

void helpDocSelect(){
	system("cls");
	cout << HELPTITLE
		 << "*******************************************************************\n"
		 << " !!使用前阅读文档，使用时胆大心细，是好习惯。不要动不动就说不会!!\n"
		 << endl
		 << "       1: 使用 *计算单一矩阵的各种关系* 的指引\n"
		 << "       2: 使用 *计算两个矩阵的逻辑相乘* 的指引\n"
		 << "       3: 使用 *计算复数的各种运算(加、减、乘)* 的指引\n"
		 << "       4: 使用 *求多元方程组的解(利用矩阵)* 的指引\n"
		 << "       5: 使用 *求解矩阵的自反闭包，对称闭包，传递闭包* 的指引\n"
		 << "       e: 返回功能选择页面\n"
		 << "*******************************************************************\n"
		 << "请输入所需要的数字并按回车键确认。\n";
	char i;
	cout << "输入你需要查看的指引的编号: ";
	cin >> i;
	if (i == '1' || i == '2' || i == 'e' || i == '3' || i == '4' || i == '5')
	{
		switch (i)
		{
		case '1':{F1Help();break;}
		case '2':{F2Help();break;}
		case '3':{F3Help();break;}
		case '4':{F4Help();break;}
		case '5':{F5Help();break;}
		case 'e':{welcomeScreen1();break;}
		}
	}
	else
	{
		cout << "\n你乱来了，别这样。上面有的数字才能输入。" << endl;
		system("pause");
		helpDocSelect();
	}	
}

void F1Help(){
	system("cls");
	cout << HELPTITLE
		 << "*******************************************************************\n"
		 << "               使用 *计算单一矩阵的各种关系* 的指引\n"
		 << endl
		 << "① 依照提示依次输入矩阵每一行即可，超过所设的数值可能会导致程序崩溃\n"
		 << "② 每输入一行用回车确认，中途可以更改当前行。\n"
		 << "③ 请自行检查每行的输入是否与你的矩阵一致，一旦按下回车，想重新输入\n"
		 << "   上一行的话，是做不到的，你能做的就是执行完当前的输入后重新再来。\n"
		 << "④ 关于各种关系的矩阵判断解释，以后会成为另一个查询模块，敬请期待。\n"
		 << endl;
	system("pause");
	helpDocSelect();
}

void F2Help(){
	system("cls");
	cout << HELPTITLE
		<< "*******************************************************************\n"
		<< "               使用 *计算矩阵的逻辑相乘* 的指引\n"
		<< endl
		<< "① 依照提示依次输入矩阵每一行即可，超过所设的数值可能会导致程序崩溃\n"
		<< "② 每输入一行用回车确认，中途可以更改当前行。\n"
		<< "③ 请自行检查每行的输入是否与你的矩阵一致，一旦按下回车，想重新输入\n"
		<< "   上一行的话，是做不到的，你能做的就是执行完当前的输入后重新再来。\n"
		<< "④ 若想计算矩阵的平方，可以直接在功能选择中选择。\n"
		<< "⑤ 此文档与 使用 *计算单一矩阵的各种关系* 的指引 相同。\n"
		<< "   不是我偷懒，确实一样。\n"
		<< endl;
	system("pause");
	helpDocSelect();
}

void F3Help(){
	system("cls");
	cout << HELPTITLE
		<< "*******************************************************************\n"
		<< "              使用 *计算复数的各种运算(加、减、乘)* 的指引\n"
		<< endl
		<< "① 依照提示依次输入两个复数的实部、虚部。\n"
		<< "② 请严格按照提示输入，否则很可能出错。\n"
		<< "③ 请自行检查每行的输入是否与你的矩阵一致，一旦按下回车，想重新输入\n"
		<< "   上一行的话，是做不到的，你能做的就是执行完当前的输入后重新再来。\n"
		<< "④ 关于复数的各种运算解释，以后会成为另一个查询模块，敬请期待。\n"
		<< endl;
	system("pause");
	helpDocSelect();
}

void F4Help(){
	system("cls");
	cout << HELPTITLE
		<< "*******************************************************************\n"
		<< "              使用 *求多元方程组的解(利用矩阵)* 的指引\n"
		<< endl
		<< "① 依照提示依次输入系数以及得数，n 个未知数，每行输入 n+1 个数据。\n"
		<< "② 每输入一行用回车确认，中途可以更改当前行。\n"
		<< "③ 请自行检查每行的输入是否与你的矩阵一致，一旦按下回车，想重新输入\n"
		<< "   上一行的话，是做不到的，你能做的就是执行完当前的输入后重新再来。\n"
		<< "④ 应用举例(三个未知数x、y、z为例):\n"
		<< "   若第一个方程为 5x + 7y - z = 33 \n"
		<< "     则第一行数据应输入: 5 (空格) 7 (空格) 33 (空格) -1 (回车)\n"
		<< "   若第二个方程为 -4x - 6z = 88 \n"
		<< "     则第二行数据应输入: -4 (空格) 0 (空格) -6 (空格) 88 (回车)\n"
		<< "   第三个式子就不列举了。\n"
		<< "⑤ 输入数据前，务必保证各个方程不同变量的排序是一致的，若不明白请参\n"
		<< "   考第四条，输入系数的顺序必须是 x、y、z，否则会计算错误。\n"
		<< endl;
	system("pause");
	helpDocSelect();
}

void aboutMe(){
	system("cls");
	cout << TITLE
		 << "*******************************************************************\n"
		 << "                            关于作者\n"
	     << endl;
	cout << "    wdx和wdxtub都是我喜欢用的名字。\n"
		 << "    tub 的解释很简单，就是土B。我想说的是，土并不是什么不好的东西，\n"
		 << "当自我膨胀的时候，一句死土B，可以让我冷静不少。当气馁的时候，一句死\n"
		 << "土B，可以让我振作起来，争取做一个好土B。\n"
		 << "    一路上感谢很多人，小学的死党，初中的球友，高中的晚自习吹水党，\n"
		 << "大学的717所有人(不算我感谢自己的话，就仨)，还有很多帮助过我的人。\n"
		 << "    为什么想走上游戏设计师的路，其实要感谢水王，他把我带进了DJMAX\n"
		 << "的世界，进而我有了我的第二部游戏机(第一部是FC红白机)，很神奇，感觉\n"
		 << "游戏里面，又是另一个世界。我也想把我心中的想法，用游戏这种高互动的\n"
		 << "形式展示给大家。高考前半年买了Wii，高考后买了XBOX360，很神奇的两部\n"
		 << "主机，这之后，我更加坚定了做好游戏的梦想。\n"
		 << "    不喜欢社团活动，热爱运动，可以正经，不正经，假正经，假不正经。\n"
		 << "希望能成为大家的朋友，最起码想到我，不能是一声长叹嘛。\n"
		 << "    抓紧梦想。\n"
		 << "    我的联系方式一开始的页面就有，这里不废话了。\n"
		 << endl;
	system("pause");
	welcomeScreen1();
}

void F5Help(){
	system("cls");
	cout << HELPTITLE
		<< "*******************************************************************\n"
		<< "         使用 *求解矩阵的自反闭包，对称闭包，传递闭包* 的指引\n"
		<< endl
		<< "① 依照提示依次输入矩阵每一行即可，超过所设的数值可能会导致程序崩溃\n"
		<< "② 每输入一行用回车确认，中途可以更改当前行。\n"
		<< "③ 请自行检查每行的输入是否与你的矩阵一致，一旦按下回车，想重新输入\n"
		<< "   上一行的话，是做不到的，你能做的就是执行完当前的输入后重新再来。\n"
		<< "④ 关于各种关系的矩阵判断解释，以后会成为另一个查询模块，敬请期待。\n"
		<< endl;
	system("pause");
	helpDocSelect();
}

void thankList(){
	system("cls");
	cout << TITLE
		<< "*******************************************************************\n"
		<< "                          致谢名单\n"
		<< endl
		<< "牛牛: 你不排在第一位，没有人在第一位，基本上每次都是你拿到最新的版本\n"
		<< "      你让我对界面设计的重要性有了重新的认识。\n"
		<< "饼饼: 虽然说，我写代码的时候，你是写作业，但是饼饼你老是鼓励我，搞得\n"
		<< "      我不努力都不行，谢谢饼饼。\n"
		<< "大死土B: 你太不厚道了，太土了，太太土土土了，所以你就第三了。\n"
		<< "呆. : 感谢你提交的bug，没有你我真就没发现这么严重一bug诶~\n"
		<< endl
		<< "**还有很多没感谢到，对不起了哈\n"
		<< endl;
	system("pause");
	welcomeScreen1();
}