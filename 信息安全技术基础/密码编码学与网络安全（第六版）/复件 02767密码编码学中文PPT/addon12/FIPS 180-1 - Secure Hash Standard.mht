From: <ÓÉ Microsoft Internet Explorer 5 ±£´æ>
Subject: FIPS 180-1 - Secure Hash Standard
Date: Thu, 1 Mar 2007 12:02:22 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01C75BF9.784BB400"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.3028

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C75BF9.784BB400
Content-Type: text/html;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.itl.nist.gov/fipspubs/fip180-1.htm

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>FIPS 180-1 - Secure Hash Standard</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; charset=3Dgb2312">
<META content=3D"MSHTML 6.00.2900.3059" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#ffffff><A name=3DFIPS_TOP>
<HR>

<CENTER>Return to the FIPS<BR><A=20
href=3D"http://www.itl.nist.gov/fipspubs/index.htm" =
target=3D'_top"'>Home=20
Page</A></CENTER>
<HR>
<B>FIPS PUB 180-1</B><BR>Supersedes FIPS PUB 180<BR>1993 May 11<BR>
<P>
<CENTER>Federal Information<BR>Processing Standards Publication=20
180-1<BR><BR>1995 April 17<BR></CENTER><B>
<CENTER>Announcing the Standard for</CENTER></B><BR>
<CENTER>
<H1>SECURE HASH STANDARD</H1></CENTER>
<MENU><FONT size=3D2><A=20
  href=3D"http://www.itl.nist.gov/fipspubs/fip180-1.htm#FORE_SEC">(The =
Foreword,=20
  Abstract, and Key Words</A><BR>can be found at the end of this =
document.)=20
  </FONT><BR></MENU>
<H5>Federal Information Processing Standards Publications (FIPS PUBS) =
are issued=20
by the National Institute of Standards and Technology after approval by =
the=20
Secretary of Commerce pursuant to Section 111(d) of the Federal Property =
and=20
Administrative Services Act of 1949, as amended by the Computer Security =
Act of=20
1987, Public Law 100-235.</H5>
<P></P><B>Name of Standard:</B> Secure Hash Standard. =
<BR><BR><B>Category of=20
Standard:</B> Computer Security. <BR><BR><B>Explanation:</B> This =
Standard=20
specifies a Secure Hash Algorithm, SHA-1, for computing a condensed=20
representation of a message or a data file. When a message of any length =
&lt;=20
2<SUP><FONT size=3D1>64</FONT></SUP> bits is input, the SHA-1 produces a =
160-bit=20
output called a message digest. The message digest can then be input to =
the=20
Digital Signature Algorithm (DSA) which generates or verifies the =
signature for=20
the message. Signing the message digest rather than the message often =
improves=20
the efficiency of the process because the message digest is usually much =
smaller=20
in size than the message. The same hash algorithm must be used by the =
verifier=20
of a digital signature as was used by the creator of the digital =
signature.=20
<BR><BR>The SHA-1 is called secure because it is computationally =
infeasible to=20
find a message which corresponds to a given message digest, or to find =
two=20
different messages which produce the same message digest. Any change to =
a=20
message in transit will, with very high probability, result in a =
different=20
message digest, and the signature will fail to verify. SHA-1 is a =
technical=20
revision of SHA (FIPS 180). A circular left shift operation has been =
added to=20
the specifications in section 7, line b, page 9 of FIPS 180 and its =
equivalent=20
in section 8, line c, page 10 of FIPS 180. This revision improves the =
security=20
provided by this standard. The SHA-1 is based on principles similar to =
those=20
used by Professor Ronald L. Rivest of MIT when designing the MD4 message =
digest=20
algorithm ("The MD4 Message Digest Algorithm," Advances in Cryptology - =
CRYPTO=20
'90 Proceedings, Springer-Verlag, 1991, pp. 303-311), and is closely =
modelled=20
after that algorithm. <BR>
<CENTER><IMG =
src=3D"http://www.itl.nist.gov/fipspubs/fip180-1.gif"><BR><B>Figure=20
1: Using the SHA-1 with the DSA</B></CENTER><BR><BR><B>Approving =
Authority:</B>=20
Secretary of Commerce. <BR><BR><B>Maintenance Agency:</B> U.S. =
Department of=20
Commerce, National Institute of Standards and Technology, Computer =
Systems=20
Laboratory. <BR><BR><B>Applicability:</B> This standard is applicable to =
all=20
Federal departments and agencies for the protection of unclassified =
information=20
that is not subject to section 2315 of Title 10, United States Code, or =
section=20
3502(2) of Title 44, United States Code. This standard is required for =
use with=20
the Digital Signature Algorithm (DSA) as specified in the Digital =
Signature=20
Standard (DSS) and whenever a secure hash algorithm is required for =
Federal=20
applica- tions. Private and commercial organizations are encouraged to =
adopt and=20
use this standard. <BR><BR><B>Applications: </B>The SHA-1 may be used =
with the=20
DSA in electronic mail, electronic funds transfer, software =
distribution, data=20
storage, and other applications which require data integrity assurance =
and data=20
origin authentication. The SHA-1 may also be used whenever it is =
necessary to=20
generate a condensed version of a message. =
<BR><BR><B>Implementations:</B> The=20
SHA-1 may be implemented in software, firmware, hardware, or any =
combination=20
thereof. Only implementations of the SHA-1 that are validated by NIST =
will be=20
considered as complying with this standard. Information about the =
requirements=20
for validating implementations of this standard can be obtained from the =

National Institute of Standards and Technology, Computer Systems =
Laboratory,=20
Attn: SHS Validation, Gaithersburg, MD 20899. <BR><BR><B>Export =
Control:</B>=20
Implementations of this standard are subject to FederalGovernment export =

controls as specified in Title 15, Code of Federal Regulations, Parts =
768=20
through 799. Exporters are advised to contact the Department of =
Commerce, Bureau=20
of Export Administration for more information. <BR><BR><B>Patents:</B>=20
Implementations of the SHA-1 in this standard may be covered by U.S. and =
foreign=20
patents. <BR><BR><B>Implementation Schedule:</B> This standard becomes =
effective=20
October 2, 1995. <BR><BR><B>Specifications:</B> Federal Information =
Processing=20
Standard (FIPS 180-1) Secure Hash Standard (affixed). <BR><BR><B>Cross=20
Index:</B>=20
<DL>
  <DD>a. FIPS PUB 46-2, Data Encryption Standard. <BR><BR>
  <DD>b. FIPS PUB 73, Guidelines for Security of Computer Applications. =
<BR><BR>
  <DD>c. FIPS PUB 140-1, Security Requirements for Cryptographic =
Modules.=20
  <BR><BR>
  <DD>d. FIPS PUB 186, Digital Signature Standard. <BR><BR>
  <DD>e. Federal Informations Resources Management Regulations (FIRMR) =
subpart=20
  201.20.303, Standards, and subpart 201.39.1002, Federal Standards.=20
</DD></DL><BR><B>Objectives:</B> The objectives of this standard are to: =

<DL>
  <DD>a. Specify the secure hash algorithm required for use with the =
Digital=20
  Signature Standard (FIPS 186) in the generation and verification of =
digital=20
  signatures; <BR><BR>
  <DD>b. Specify the secure hash algorithm to be used whenever a secure =
hash=20
  algorithm is required for Federal applications; and<BR><BR>
  <DD>c. Encourage the adoption and use of the specified secure hash =
algorithm=20
  by private and commercial organizations. =
</DD></DL><BR><B>Qualifications:</B>=20
While it is the intent of this standard to specify a secure hash =
algorithm,=20
conformance to this standard does not assure that a particular =
implementation is=20
secure. The responsible authority in each agency or department shall =
assure that=20
an overall implementation provides an acceptable level of security. This =

standard will be reviewed every five years in order to assess its =
adequacy.=20
<BR><BR><B>Waiver Procedure:</B> Under certain exceptional =
circumstances, the=20
heads of Federal departments and agencies may approve waivers to Federal =

Information Processing Standards (FIPS). The head of such agency may =
redelegate=20
such authority only to a senior official designated pursuant to section =
3506(b)=20
of Title 44, United States Code. Waiver shall be granted only when:=20
<DL>
  <DD>a. Compliance with a standard would adversely affect the =
accomplishment of=20
  the mission of an operator of a Federal computer system; or<BR><BR>
  <DD>b. Compliance with a standard would cause a major adverse =
financial impact=20
  on the operator which is not offset by Government-wide savings.=20
  <OL></OL><BR>Agency heads may act upon a written waiver request =
containing the=20
  information detailed above. Agency heads may also act without a =
written waiver=20
  request when they determine that conditions for meeting the standard =
cannot be=20
  met. Agency heads may approve waivers only by a written decision which =

  explains the basis on which the agency head made the required =
finding(s). A=20
  copy of each decision, with procurement sensitive or classified =
portions=20
  clearly identified, shall be sent to: National Institute of Standards =
and=20
  Technology; ATTN: FIPS Waiver Decisions, Technology Building, Room =
B-154,=20
  Gaithersburg, MD 20899. <BR><BR>In addition, notice of each waiver =
granted and=20
  each delegation of authority to approve waivers shall be sent promptly =
to the=20
  Committee on Government Operations of the House of Representatives and =
the=20
  Committee on Government Affairs of the Senate and shall be published =
promptly=20
  in the Federal Register. <BR><BR>When the determination on a waiver =
applies to=20
  the procurement of equipment and/or services, a notice of the waiver=20
  determination must be published in the Commerce Business Daily as a =
part of=20
  the notice of solicitation for offers of an acquisition or, if the =
waiver=20
  determination is made after that notice is published, by amendment to =
such=20
  notice. <BR><BR>A copy of the waiver, any supporting documents, the =
document=20
  approving the waiver and any accompanying documents, with such =
deletions as=20
  the agency is authorized and decides to make under 5 United States =
Code=20
  Section 552(b), shall be part of the procurement documentation and =
retained by=20
  the agency. <BR><BR><B>Where to Obtain Copies of the Standard: =
</B>Copies of=20
  this publication are for sale by the National Technical Information =
Service,=20
  U.S. Department of Commerce, Springfield, VA 22161. When ordering, =
refer to=20
  Federal Information Processing Standards Publication 180-1 =
(FIPSPUB180-1), and=20
  identify the title. When microfiche is desired, this should be =
specified.=20
  Prices are published by NTIS in current catalogs and other issuances. =
Payment=20
  may be made by check, money order, deposit account or charged to a =
credit card=20
  accepted by NTIS.
  <P></P><BR>
  <HR>
  <B>FIPS PUB 180-1</B><BR>Supersedes FIPS PUB 180<BR>1993 May 11<BR>
  <P>
  <CENTER>Federal Information<BR>Processing Standards Publication=20
  180-1<BR><BR>1995 April 17<BR></CENTER><B>
  <CENTER>Specifications for</CENTER></B><BR>
  <CENTER>
  <H1>SECURE HASH STANDARD</H1></CENTER><BR><BR>
  <CENTER><B>1. INTRODUCTION</B></CENTER><BR><BR>The Secure Hash =
Algorithm=20
  (SHA-1) is required for use with the Digital Signature Algorithm (DSA) =
as=20
  specified in the Digital Signature Standard (DSS) and whenever a =
secure hash=20
  algorithm is required for federal applica- tions. For a message of =
length &lt;=20
  2^64 bits, the SHA-1 produces a 160-bit condensed representation of =
the=20
  message called a message digest. The message digest is used during =
generation=20
  of a signature for the message. The SHA-1 is also used to compute a =
message=20
  digest for the received version of the message during the process of =
verifying=20
  the signature. Any change to the message in transit will, with very =
high=20
  probability, result in a different message digest, and the signature =
will fail=20
  to verify. <BR><BR>The SHA-1 is designed to have the following =
properties: it=20
  is computationally infeasible to find a message which corresponds to a =
given=20
  message digest, or to find two different messages which produce the =
same=20
  message digest. <BR><BR>
  <CENTER><B>2. BIT STRINGS AND INTEGERS</B></CENTER><BR><BR>The =
following=20
  terminology related to bit strings and integers will be used:=20
  <DL>
    <DD>a. A hex digit is an element of the set {0, 1, ... , 9, A, ... , =
F}. A=20
    hex digit is the representation of a 4-bit string. <B>Examples:</B> =
7 =3D=20
    0111, A =3D 1010. <BR><BR>
    <DD>b. A word equals a 32-bit string which may be represented as a =
sequence=20
    of 8 hex digits. To convert a word to 8 hex digits each 4-bit string =
is=20
    converted to its hex equivalent as described in (a) above. =
<B>Example:=20
    </B><BR><BR>
    <CENTER>1010 0001 0000 0011 1111 1110 0010 0011 =3D A103FE23. =
</CENTER><BR>
    <DD>c. An integer between 0 and 2<SUP><FONT size=3D1>32</FONT></SUP> =
- 1=20
    inclusive may be represented as a word. The least significant four =
bits of=20
    the integer are represented by the right-most hex digit of the word=20
    representation. <B>Example:</B> the integer 291 =3D 2<SUP><FONT=20
    size=3D1>8</FONT></SUP>+2<SUP><FONT =
size=3D1>5</FONT></SUP>+2<SUP><FONT=20
    size=3D1>1</FONT></SUP>+2<SUP><FONT size=3D1>0</FONT></SUP> =3D =
256+32+2+1 is=20
    represented by the hex word, 00000123. <BR><BR>
    <DD>If z is an integer, 0 &lt;=3D z &lt; 2<SUP><FONT =
size=3D1>64</FONT></SUP>,=20
    then z =3D 2<SUP><FONT size=3D1>32</FONT></SUP>x + y where 0 &lt;=3D =
x &lt;=20
    2<SUP><FONT size=3D1>32</FONT></SUP> and 0 &lt;=3D y &lt; =
2<SUP><FONT=20
    size=3D1>32</FONT></SUP>. Since x and y can be represented as words =
X and Y,=20
    respectively, z can be represented as the pair of words (X,Y). =
<BR><BR>
    <DD>d. block =3D 512-bit string. A block (e.g., B) may be =
represented as a=20
    sequence of 16 words.</DD></DL><BR>
  <CENTER><B>3. OPERATIONS ON WORDS</B></CENTER><BR><BR>The following =
logical=20
  operators will be applied to words:=20
  <DL>
    <DD>a. Bitwise logical word operations <PRE>=20
X ^ Y         =3D  bitwise logical "and" of  X and Y.

X \/ Y        =3D  bitwise logical "inclusive-or" of X and Y.
   =20
X XOR Y       =3D  bitwise logical "exclusive-or" of X and Y.

~ X           =3D  bitwise logical "complement" of X.
</PRE><BR>
    <DD><B>Example: </B><PRE>            =
01101100101110011101001001111011
      XOR   01100101110000010110100110110111
            --------------------------------
        =3D   00001001011110001011101111001100
</PRE>
    <DD>b. The operation X + Y is defined as follows: words X and Y =
represent=20
    integers x and y, where 0 &lt;=3D x &lt; 2<SUP><FONT =
size=3D1>32</FONT></SUP>=20
    and 0 &lt;=3D y &lt; 2<SUP><FONT size=3D1>32</FONT></SUP>. For =
positive integers=20
    n and m, let n mod m be the remainder upon dividing n by m. Compute=20
    <DL>
      <DD>z =3D (x + y) mod 2<SUP><FONT size=3D1>32</FONT></SUP>. =
</DD></DL><BR>
    <DD>Then 0 &lt;=3D z &lt; 2<SUP><FONT size=3D1>32</FONT></SUP>. =
Convert z to a=20
    word, Z, and define Z =3D X + Y. <BR><BR>
    <DD>c. The circular left shift operation S<SUP><FONT=20
    size=3D1>n</FONT></SUP>(X), where X is a word and n is an integer =
with 0 &lt;=3D=20
    n <SUP><FONT size=3D1>32</FONT></SUP>, is defined by=20
    <DL>
      <DD>S<SUP><FONT size=3D1>n</FONT></SUP>(X) =3D (X &lt;&lt; n) OR =
(X &gt;&gt;=20
      32-n). </DD></DL><BR>
    <DD>In the above, X &lt;&lt; n is obtained as follows: discard the =
left-most=20
    n bits of X and then pad the result with n zeroes on the right (the =
result=20
    will still be 32 bits). X &gt;&gt; n is obtained by discarding the=20
    right-most n bits of X and then padding the result with n zeroes on =
the=20
    left. Thus S<SUP><FONT size=3D1>n</FONT></SUP>(X) is equivalent to a =
circular=20
    shift of X by n positions to the left.</DD></DL><BR>
  <CENTER><B>4. MESSAGE PADDING</B></CENTER><BR><BR>The SHA-1 is used to =
compute=20
  a message digest for a message or data file that is provided as input. =
The=20
  message or data file should be considered to be a bit string. The =
length of=20
  the message is the number of bits in the message (the empty message =
has length=20
  0). If the number of bits in a message is a multiple of 8, for =
compactness we=20
  can represent the message in hex. The purpose of message padding is to =
make=20
  the total length of a padded message a multiple of 512. The SHA-1 =
sequentially=20
  processes blocks of 512 bits when computing the message digest. The =
following=20
  specifies how this padding shall be performed. As a summary, a "1" =
followed by=20
  m "0"s followed by a 64-bit integer are appended to the end of the =
message to=20
  produce a padded message of length 512 * n. The 64-bit integer is l, =
the=20
  length of the original message. The padded message is then processed =
by the=20
  SHA-1 as n 512-bit blocks. <BR><BR>Suppose a message has length l &lt; =

  2<SUP><FONT size=3D1>64</FONT></SUP>. Before it is input to the SHA-1, =
the=20
  message is padded on the right as follows:=20
  <DL>
    <DD>a. "1" is appended. <B>Example:</B> if the original message is=20
    "01010000", this is padded to "010100001". <BR><BR>
    <DD>b. "0"s are appended. The number of "0"s will depend on the =
original=20
    length of the message. The last 64 bits of the last 512-bit block =
are=20
    reserved for the length l of the original message.=20
    <DL>
      <DD><B>Example:</B> Suppose the original message is the bit =
string<BR>
      <CENTER>01100001 01100010 01100011 01100100 01100101.</CENTER><BR>
      <DD>After step (a) this gives <BR>
      <CENTER>01100001 01100010 01100011 01100100 01100101 =
1.</CENTER><BR><BR>
      <DD>Since l =3D 40, the number of bits in the above is 41 and 407 =
"0"s are=20
      appended, making the total now 448. This gives (in hex)=20
      <DL>
        <DD>61626364 65800000 00000000 00000000=20
        <DD>00000000 00000000 00000000 00000000=20
        <DD>00000000 00000000 00000000 00000000=20
        <DD>00000000 00000000. </DD></DL><BR>
      <DD>c. Obtain the 2-word representation of l, the number of bits =
in the=20
      original message. If l &lt; 2<SUP><FONT size=3D1>32</FONT></SUP> =
then the=20
      first word is all zeroes. Append these two words to the padded =
message.=20
      <DL>
        <DD><B>Example:</B> Suppose the original message is as in (b). =
Then l =3D=20
        40 (note that l is computed before any padding). The two-word=20
        representation of 40 is hex 00000000 00000028. Hence the final =
padded=20
        message is hex=20
        <DL>
          <DD>61626364 65800000 00000000 00000000=20
          <DD>00000000 00000000 00000000 00000000=20
          <DD>00000000 00000000 00000000 00000000=20
          <DD>00000000 00000000 00000000 00000028. =
</DD></DL><BR></DD></DL>The=20
      padded message will contain 16 * n words for some n &gt; 0. The =
padded=20
      message is regarded as a sequence of n blocks M<SUB><FONT=20
      size=3D1>1</FONT></SUB> , M<SUB><FONT size=3D1>2</FONT></SUB>, ... =
,=20
      M<SUB><FONT size=3D1>n</FONT></SUB>, where each M<SUB><FONT=20
      size=3D1>i</FONT></SUB> contains 16 words and M<SUB><FONT=20
      size=3D1>1</FONT></SUB> contains the first characters (or bits) of =
the=20
      message.<BR><BR>
      <CENTER><B>5. FUNCTIONS USED</B></CENTER><BR><BR>A sequence of =
logical=20
      functions f<SUB><FONT size=3D1>0</FONT></SUB>, f<SUB><FONT=20
      size=3D1>1</FONT></SUB>,..., f<SUB><FONT size=3D1>79</FONT></SUB> =
is used in=20
      the SHA-1. Each f<SUB><FONT size=3D1>t</FONT></SUB>, 0 &lt;=3D t =
&lt;=3D 79,=20
      operates on three 32-bit words B, C, D and produces a 32-bit word =
as=20
      output. f<SUB><FONT size=3D1>t</FONT></SUB>(B,C,D) is defined as =
follows:=20
      for words B, C, D,
      <DL>
        <DD>f<SUB><FONT size=3D1>t</FONT></SUB>(B,C,D) =3D (B AND C) OR =
((NOT B) AND=20
        D) ( 0 &lt;=3D t &lt;=3D 19) <BR><BR>
        <DD>f<SUB><FONT size=3D1>t</FONT></SUB>(B,C,D) =3D B XOR C XOR D =
(20 &lt;=3D t=20
        &lt;=3D 39) <BR><BR>
        <DD>f<SUB><FONT size=3D1>t</FONT></SUB>(B,C,D) =3D (B AND C) OR =
(B AND D) OR=20
        (C AND D) (40 &lt;=3D t &lt;=3D 59) <BR><BR>
        <DD>f<SUB><FONT size=3D1>t</FONT></SUB>(B,C,D) =3D B XOR C XOR D =
(60 &lt;=3D t=20
        &lt;=3D 79). </DD></DL><BR>
      <CENTER><B>6. CONSTANTS USED</B></CENTER><BR><BR>A sequence of =
constant=20
      words K(0), K(1), ... , K(79) is used in the SHA-1. In hex these =
are given=20
      by=20
      <DL>
        <DD>K =3D 5A827999 ( 0 &lt;=3D t &lt;=3D 19) <BR><BR>
        <DD>K<SUB><FONT size=3D1>t</FONT></SUB> =3D 6ED9EBA1 (20 &lt;=3D =
t &lt;=3D 39)=20
        <BR><BR>
        <DD>K<SUB><FONT size=3D1>t</FONT></SUB> =3D 8F1BBCDC (40 &lt;=3D =
t &lt;=3D 59)=20
        <BR><BR>
        <DD>K<SUB><FONT size=3D1>t</FONT></SUB> =3D CA62C1D6 (60 &lt;=3D =
t &lt;=3D 79).=20
        </DD></DL><BR>
      <CENTER><B>7. COMPUTING THE MESSAGE DIGEST</B></CENTER><BR><BR>The =
message=20
      digest is computed using the final padded message. The computation =
uses=20
      two buffers, each consisting of five 32-bit words, and a sequence =
of=20
      eighty 32-bit words. The words of the first 5-word buffer are =
labeled=20
      A,B,C,D,E. The words of the second 5-word buffer are labeled =
H<SUB><FONT=20
      size=3D1>0</FONT></SUB>, H<SUB><FONT size=3D1>1</FONT></SUB>, =
H<SUB><FONT=20
      size=3D1>2</FONT></SUB>, H<SUB><FONT size=3D1>3</FONT></SUB>, =
H<SUB><FONT=20
      size=3D1>4</FONT></SUB>. The words of the 80-word sequence are =
labeled=20
      W<SUB><FONT size=3D1>0</FONT></SUB>, W<SUB><FONT =
size=3D1>1</FONT></SUB>,...,=20
      W<SUB><FONT size=3D1>79</FONT></SUB>. A single word buffer TEMP is =
also=20
      employed. <BR><BR>To generate the message digest, the 16-word =
blocks=20
      M<SUB><FONT size=3D1>1</FONT></SUB>, M<SUB><FONT =
size=3D1>2</FONT></SUB>,...,=20
      M<SUB><FONT size=3D1>n</FONT></SUB> defined in Section 4 are =
processed in=20
      order. The processing of each M<SUB><FONT size=3D1>i</FONT></SUB> =
involves=20
      80 steps. <BR><BR>Before processing any blocks, the {H<SUB><FONT=20
      size=3D1>i</FONT></SUB>} are initialized as follows: in hex,=20
      <DL>
        <DD>H<SUB><FONT size=3D1>0</FONT></SUB> =3D 67452301 <BR><BR>
        <DD>H<SUB><FONT size=3D1>1</FONT></SUB> =3D EFCDAB89 <BR><BR>
        <DD>H<SUB><FONT size=3D1>2</FONT></SUB> =3D 98BADCFE <BR><BR>
        <DD>H<SUB><FONT size=3D1>3</FONT></SUB> =3D 10325476 <BR><BR>
        <DD>H<SUB><FONT size=3D1>4</FONT></SUB> =3D C3D2E1F0. =
</DD></DL><BR>Now=20
      M<SUB><FONT size=3D1>1</FONT></SUB>, M<SUB><FONT =
size=3D1>2</FONT></SUB>, ...=20
      , M<SUB><FONT size=3D1>n</FONT></SUB> are processed. To process =
M<SUB><FONT=20
      size=3D1>i</FONT></SUB>, we proceed as follows:=20
      <DL>
        <DD>a. Divide M<SUB><FONT size=3D1>i</FONT></SUB> into 16 words=20
        W<SUB><FONT size=3D1>0</FONT></SUB>, W<SUB><FONT =
size=3D1>1</FONT></SUB>,=20
        ... , W<SUB><FONT size=3D1>15</FONT></SUB>, where W<SUB><FONT=20
        size=3D1>0</FONT></SUB> is the left-most word. <BR><BR>
        <DD>b. For t =3D 16 to 79 let W<SUB><FONT =
size=3D1>t</FONT></SUB> =3D=20
        S<SUP><FONT size=3D1>1</FONT></SUP>(W<SUB><FONT =
size=3D1>t-3</FONT></SUB>=20
        XOR W<SUB><FONT size=3D1>t-8</FONT></SUB> XOR W<SUB><FONT =
size=3D1>t-=20
        14</FONT></SUB> XOR W<SUB><FONT size=3D1>t-16</FONT></SUB>). =
<BR><BR>
        <DD>c. Let A =3D H<SUB><FONT size=3D1>0</FONT></SUB>, B =3D =
H<SUB><FONT=20
        size=3D1>1</FONT></SUB>, C =3D H<SUB><FONT =
size=3D1>2</FONT></SUB>, D =3D=20
        H<SUB><FONT size=3D1>3</FONT></SUB>, E =3D H<SUB><FONT=20
        size=3D1>4</FONT></SUB>.<BR><BR>
        <DD>d. For t =3D 0 to 79 do=20
        <DL>
          <DD>TEMP =3D S<SUP><FONT size=3D1>5</FONT></SUP>(A) + =
f<SUB><FONT=20
          size=3D1>t</FONT></SUB>(B,C,D) + E + W<SUB><FONT =
size=3D1>t</FONT></SUB> +=20
          K<SUB><FONT size=3D1>t</FONT></SUB>; <BR><BR>
          <DD>E =3D D; D =3D C; C =3D S<SUP><FONT =
size=3D1>30</FONT></SUP>(B); B =3D A; A=20
          =3D TEMP; </DD></DL><BR>
        <DD>e. Let H<SUB><FONT size=3D1>0</FONT></SUB> =3D H<SUB><FONT=20
        size=3D1>0</FONT></SUB> + A, H<SUB><FONT size=3D1>1</FONT></SUB> =
=3D=20
        H<SUB><FONT size=3D1>1</FONT></SUB> + B, H<SUB><FONT =
size=3D1>2</FONT></SUB>=20
        =3D H<SUB><FONT size=3D1>2</FONT></SUB> + C, H<SUB><FONT=20
        size=3D1>3</FONT></SUB> =3D H<SUB><FONT size=3D1>3</FONT></SUB> =
+ D,=20
        H<SUB><FONT size=3D1>4</FONT></SUB> =3D H<SUB><FONT =
size=3D1>4</FONT></SUB> +=20
        E. </DD></DL><BR>After processing M<SUB><FONT =
size=3D1>n</FONT></SUB>, the=20
      message digest is the 160-bit string represented by the 5 words=20
      <DL>
        <DD>H<SUB><FONT size=3D1>0</FONT></SUB> H<SUB><FONT =
size=3D1>1</FONT></SUB>=20
        H<SUB><FONT size=3D1>2</FONT></SUB> H<SUB><FONT =
size=3D1>3</FONT></SUB>=20
        H<SUB><FONT size=3D1>4</FONT></SUB>. </DD></DL><BR>
      <CENTER><B>8. ALTERNATE METHOD OF COMPUTATION</B> =
</CENTER><BR><BR>The=20
      above assumes that the sequence W<SUB><FONT =
size=3D1>0</FONT></SUB>, ... ,=20
      W<SUB><FONT size=3D1>79</FONT></SUB> is implemented as an array of =
eighty=20
      32-bit words. This is efficient from the standpoint of =
minimization of=20
      execution time, since the addresses of W<SUB><FONT=20
      size=3D1>t-3</FONT></SUB>, ... ,W<SUB><FONT =
size=3D1>t-16</FONT></SUB> in step=20
      (b) are easily computed. If space is at a premium, an alternative =
is to=20
      regard { W<SUB><FONT size=3D1>t</FONT></SUB> } as a circular =
queue, which=20
      may be implemented using an array of sixteen 32-bit words W[0], =
... W[15].=20
      In this case, in hex let MASK =3D 0000000F. Then processing of =
M<SUB><FONT=20
      size=3D1>i</FONT></SUB> is as follows:=20
      <DL>
        <DD>a. Divide M<SUB><FONT size=3D1>i</FONT></SUB> into 16 words =
W[0], ...=20
        , W[15], where W[0] is the left-most word. <BR><BR>
        <DD>b. Let A =3D H<SUB><FONT size=3D1>0</FONT></SUB>, B =3D =
H<SUB><FONT=20
        size=3D1>1</FONT></SUB>, C =3D H<SUB><FONT =
size=3D1>2</FONT></SUB>, D =3D=20
        H<SUB>3<FONT size=3D1></FONT></SUB>, E =3D H<SUB><FONT=20
        size=3D1>4</FONT></SUB>. <BR><BR>
        <DD>c. For t =3D 0 to 79 do=20
        <DL>
          <DD>s =3D t ^ MASK; <BR><BR>
          <DD>if (t &gt;=3D 16) W[s] =3D S<SUP><FONT =
size=3D1>1</FONT></SUP>(W[(s +=20
          13) ^ MASK] XOR W[(s + 8) AND MASK] XOR W[(s + 2) ^ MASK] XOR =
W[s]);=20
          <BR><BR>
          <DD>TEMP =3D S<SUP><FONT size=3D1>5</FONT></SUP>(A) + =
f<SUB><FONT=20
          size=3D1>t</FONT></SUB>(B,C,D) + E + W[s] + K<SUB><FONT=20
          size=3D1>t</FONT></SUB>; <BR><BR>
          <DD>E =3D D; D =3D C; C =3D S<SUP><FONT =
size=3D1>30</FONT></SUP>(B); B =3D A; A=20
          =3D TEMP; </DD></DL><BR>
        <DD>d. Let H<SUB><FONT size=3D1>0</FONT></SUB> =3D H<SUB><FONT=20
        size=3D1>0</FONT></SUB> + A, H<SUB><FONT size=3D1>1</FONT></SUB> =
=3D=20
        H<SUB><FONT size=3D1>1</FONT></SUB> + B, H<SUB><FONT =
size=3D1>2</FONT></SUB>=20
        =3D H<SUB><FONT size=3D1>2</FONT></SUB> + C, H<SUB><FONT=20
        size=3D1>3</FONT></SUB> =3D H<SUB><FONT size=3D1>3</FONT></SUB> =
+ D,=20
        H<SUB><FONT size=3D1>4</FONT></SUB> =3D H<SUB><FONT =
size=3D1>4</FONT></SUB> +=20
        E. </DD></DL><BR>
      <CENTER><B>9. COMPARISON OF METHODS</B></CENTER><BR><BR>The =
methods of=20
      Sections 7 and 8 yield the same message digest. Although using the =
method=20
      of Section 8 saves sixty-four 32-bit words of storage, it is =
likely to=20
      lengthen execution time due to the increased complexity of the =
address=20
      computations for the { W[t] } in step (c). Other computation =
methods which=20
      give identical results may be implemented in conformance with the=20
      standard. <BR><BR>
      <UL></UL></DD></DL>
    <CENTER><B>APPENDIX A. A SAMPLE MESSAGE AND ITS MESSAGE=20
    DIGEST</B></CENTER><BR><BR>This appendix is for informational =
purposes only=20
    and is not required to meet the standard. <BR><BR>Let the message be =
the=20
    ASCII binary-coded form of "abc", i.e., <BR>
    <DL>
      <DD>01100001 01100010 01100011. </DD></DL><BR>This message has =
length l =3D=20
    24. In step (a) of Section 4, we append "1". In step (b) we append =
423 "0"s.=20
    In step (c) we append hex 00000000 00000018, the 2-word =
representation of=20
    24. Thus the final padded message consists of one block, so that n =
=3D 1 in=20
    the notation of Section 4. <BR><BR>The initial hex values of =
{H<SUB><FONT=20
    size=3D1>i</FONT></SUB>} are <BR><BR>H<SUB><FONT =
size=3D1>0</FONT></SUB> =3D=20
    67452301 <BR>H<SUB><FONT size=3D1>1</FONT></SUB> =3D EFCDAB89 =
<BR>H<SUB><FONT=20
    size=3D1>2</FONT></SUB> =3D 98BADCFE <BR>H<SUB><FONT =
size=3D1>3</FONT></SUB> =3D=20
    10325476 <BR>H<SUB><FONT size=3D1>4</FONT></SUB> =3D C3D2E1F0. =
<BR><BR>Start=20
    processing block 1. The words of block 1 are <BR><BR>W[0] =3D =
61626380<BR>W[1]=20
    =3D 00000000<BR>W[2] =3D 00000000<BR>W[3] =3D 00000000<BR>W[4] =3D =
00000000<BR>W[5]=20
    =3D 00000000<BR>W[6] =3D 00000000<BR>W[7] =3D 00000000<BR>W[8] =3D =
00000000<BR>W[9]=20
    =3D 00000000<BR>W[10] =3D 00000000<BR>W[11] =3D 00000000<BR>W[12] =
=3D=20
    00000000<BR>W[13] =3D 00000000<BR>W[14] =3D 00000000<BR>W[15] =3D =
00000018.=20
    <BR><BR>The hex values of A,B,C,D,E after pass t of the "for t =3D 0 =
to 79"=20
    loop (step (d) of Section 7 or step (c) of Section 8) are<BR><PRE>   =
   =20
            A           B           C           D           E

t =3D  0: 0116FC33    67452301    7BF36AE2    98BADCFE    10325476
t =3D  1: 8990536D    0116FC33    59D148C0    7BF36AE2    98BADCFE
t =3D  2: A1390F08    8990536D    C045BF0C    59D148C0    7BF36AE2
t =3D  3: CDD8E11B    A1390F08    626414DB    C045BF0C    59D148C0
t =3D  4: CFD499DE    CDD8E11B    284E43C2    626414DB    C045BF0C
t =3D  5: 3FC7CA40    CFD499DE    F3763846    284E43C2    626414DB
t =3D  6: 993E30C1    3FC7CA40    B3F52677    F3763846    284E43C2
t =3D  7: 9E8C07D4    993E30C1    0FF1F290    B3F52677    F3763846
t =3D  8: 4B6AE328    9E8C07D4    664F8C30    0FF1F290    B3F52677
t =3D  9: 8351F929    4B6AE328    27A301F5    664F8C30    0FF1F290
t =3D 10: FBDA9E89    8351F929    12DAB8CA    27A301F5    664F8C30
t =3D 11: 63188FE4    FBDA9E89    60D47E4A    12DAB8CA    27A301F5
t =3D 12: 4607B664    63188FE4    7EF6A7A2    60D47E4A    12DAB8CA
t =3D 13: 9128F695    4607B664    18C623F9    7EF6A7A2    60D47E4A
t =3D 14: 196BEE77    9128F695    1181ED99    18C623F9    7EF6A7A2
t =3D 15: 20BDD62F    196BEE77    644A3DA5    1181ED99    18C623F9
t =3D 16: 4E925823    20BDD62F    C65AFB9D    644A3DA5    1181ED99
t =3D 17: 82AA6728    4E925823    C82F758B    C65AFB9D    644A3DA5
t =3D 18: DC64901D    82AA6728    D3A49608    C82F758B    C65AFB9D
t =3D 19: FD9E1D7D    DC64901D    20AA99CA    D3A49608    C82F758B
t =3D 20: 1A37B0CA    FD9E1D7D    77192407    20AA99CA    D3A49608
t =3D 21: 33A23BFC    1A37B0CA    7F67875F    77192407    20AA99CA
t =3D 22: 21283486    33A23BFC    868DEC32    7F67875F    77192407
t =3D 23: D541F12D    21283486    0CE88EFF    868DEC32    7F67875F
t =3D 24: C7567DC6    D541F12D    884A0D21    0CE88EFF    868DEC32
t =3D 25: 48413BA4    C7567DC6    75507C4B    884A0D21    0CE88EFF
t =3D 26: BE35FBD5    48413BA4    B1D59F71    75507C4B    884A0D21
t =3D 27: 4AA84D97    BE35FBD5    12104EE9    B1D59F71    75507C4B
t =3D 28: 8370B52E    4AA84D97    6F8D7EF5    12104EE9    B1D59F71
t =3D 29: C5FBAF5D    8370B52E    D2AA1365    6F8D7EF5    12104EE9
t =3D 30: 1267B407    C5FBAF5D    A0DC2D4B    D2AA1365    6F8D7EF5
t =3D 31: 3B845D33    1267B407    717EEBD7    A0DC2D4B    D2AA1365
t =3D 32: 046FAA0A    3B845D33    C499ED01    717EEBD7    A0DC2D4B
t =3D 33: 2C0EBC11    046FAA0A    CEE1174C    C499ED01    717EEBD7
t =3D 34: 21796AD4    2C0EBC11    811BEA82    CEE1174C    C499ED01
t =3D 35: DCBBB0CB    21796AD4    4B03AF04    811BEA82    CEE1174C
t =3D 36: 0F511FD8    DCBBB0CB    085E5AB5    4B03AF04    811BEA82
t =3D 37: DC63973F    0F511FD8    F72EEC32    085E5AB5    4B03AF04
t =3D 38: 4C986405    DC63973F    03D447F6    F72EEC32    085E5AB5
t =3D 39: 32DE1CBA    4C986405    F718E5CF    03D447F6    F72EEC32
t =3D 40: FC87DEDF    32DE1CBA    53261901    F718E5CF    03D447F6
t =3D 41: 970A0D5C    FC87DEDF    8CB7872E    53261901    F718E5CF
t =3D 42: 7F193DC5    970A0D5C    FF21F7B7    8CB7872E    53261901
t =3D 43: EE1B1AAF    7F193DC5    25C28357    FF21F7B7    8CB7872E
t =3D 44: 40F28E09    EE1B1AAF    5FC64F71    25C28357    FF21F7B7
t =3D 45: 1C51E1F2    40F28E09    FB86C6AB    5FC64F71    25C28357
t =3D 46: A01B846C    1C51E1F2    503CA382    FB86C6AB    5FC64F71
t =3D 47: BEAD02CA    A01B846C    8714787C    503CA382    FB86C6AB
t =3D 48: BAF39337    BEAD02CA    2806E11B    8714787C    503CA382
t =3D 49: 120731C5    BAF39337    AFAB40B2    2806E11B    8714787C
t =3D 50: 641DB2CE    120731C5    EEBCE4CD    AFAB40B2    2806E11B
t =3D 51: 3847AD66    641DB2CE    4481CC71    EEBCE4CD    AFAB40B2
t =3D 52: E490436D    3847AD66    99076CB3    4481CC71    EEBCE4CD
t =3D 53: 27E9F1D8    E490436D    8E11EB59    99076CB3    4481CC71
t =3D 54: 7B71F76D    27E9F1D8    792410DB    8E11EB59    99076CB3
t =3D 55: 5E6456AF    7B71F76D    09FA7C76    792410DB    8E11EB59
t =3D 56: C846093F    5E6456AF    5EDC7DDB    09FA7C76    792410DB
t =3D 57: D262FF50    C846093F    D79915AB    5EDC7DDB    09FA7C76
t =3D 58: 09D785FD    D262FF50    F211824F    D79915AB    5EDC7DDB
t =3D 59: 3F52DE5A    09D785FD    3498BFD4    F211824F    D79915AB
t =3D 60: D756C147    3F52DE5A    4275E17F    3498BFD4    F211824F
t =3D 61: 548C9CB2    D756C147    8FD4B796    4275E17F    3498BFD4
t =3D 62: B66C020B    548C9CB2    F5D5B051    8FD4B796    4275E17F
t =3D 63: 6B61C9E1    B66C020B    9523272C    F5D5B051    8FD4B796
t =3D 64: 19DFA7AC    6B61C9E1    ED9B0082    9523272C    F5D5B051
t =3D 65: 101655F9    19DFA7AC    5AD87278    ED9B0082    9523272C
t =3D 66: 0C3DF2B4    101655F9    0677E9EB    5AD87278    ED9B0082
t =3D 67: 78DD4D2B    0C3DF2B4    4405957E    0677E9EB    5AD87278
t =3D 68: 497093C0    78DD4D2B    030F7CAD    4405957E    0677E9EB
t =3D 69: 3F2588C2    497093C0    DE37534A    030F7CAD    4405957E
t =3D 70: C199F8C7    3F2588C2    125C24F0    DE37534A    030F7CAD
t =3D 71: 39859DE7    C199F8C7    8FC96230    125C24F0    DE37534A
t =3D 72: EDB42DE4    39859DE7    F0667E31    8FC96230    125C24F0
t =3D 73: 11793F6F    EDB42DE4    CE616779    F0667E31    8FC96230
t =3D 74: 5EE76897    11793F6F    3B6D0B79    CE616779    F0667E31
t =3D 75: 63F7DAB7    5EE76897    C45E4FDB    3B6D0B79    CE616779
t =3D 76: A079B7D9    63F7DAB7    D7B9DA25    C45E4FDB    3B6D0B79
t =3D 77: 860D21CC    A079B7D9    D8FDF6AD    D7B9DA25    C45E4FDB
t =3D 78: 5738D5E1    860D21CC    681E6DF6    D8FDF6AD    D7B9DA25
t =3D 79: 42541B35    5738D5E1    21834873    681E6DF6    D8FDF6AD.
</PRE>Block 1 has been processed. The values of {H<SUB><FONT=20
    size=3D1>i</FONT></SUB>} are <BR><BR>H<SUB><FONT =
size=3D1>0</FONT></SUB> =3D=20
    67452301 + 42541B35 =3D A9993E36 <BR>H<SUB><FONT =
size=3D1>1</FONT></SUB> =3D=20
    EFCDAB89 + 5738D5E1 =3D 4706816A <BR>H<SUB><FONT =
size=3D1>2</FONT></SUB> =3D=20
    98BADCFE + 21834873 =3D BA3E2571 <BR>H<SUB><FONT =
size=3D1>3</FONT></SUB> =3D=20
    10325476 + 681E6DF6 =3D 7850C26C <BR>H<SUB><FONT =
size=3D1>4</FONT></SUB> =3D=20
    C3D2E1F0 + D8FDF6AD =3D 9CD0D89D. <BR><BR>Message digest =3D =
A9993E36 4706816A=20
    BA3E2571 7850C26C 9CD0D89D <BR><BR><BR>
    <UL></UL></DD></DL>
  <CENTER><B>APPENDIX B. A SECOND SAMPLE MESSAGE AND ITS MESSAGE=20
  DIGEST</B></CENTER><BR><BR>This appendix is for informational purposes =
only=20
  and is not required to meet the standard. <BR><BR>Let the message be =
the=20
  binary-coded form (cf. Appendix A) of the ASCII string <BR>
  <CENTER>"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq".=20
  </CENTER><BR>Since each of the 56 characters is converted to 8 bits, =
the=20
  length of the message is l =3D 448. In step (a) of Section 4, we =
append "1". In=20
  step (b) we append 511 "0"s. In step (c) we append the 2-word =
representation=20
  of 448, i.e., hex 00000000 000001C0. This gives n =3D 2. <BR><BR>The =
initial hex=20
  values of {H<SUB><FONT size=3D1>i</FONT></SUB>} are =
<BR><BR>H<SUB><FONT=20
  size=3D1>0</FONT></SUB> =3D 67452301 <BR>H<SUB><FONT =
size=3D1>1</FONT></SUB> =3D=20
  EFCDAB89 <BR>H<SUB><FONT size=3D1>2</FONT></SUB> =3D 98BADCFE =
<BR>H<SUB><FONT=20
  size=3D1>3</FONT></SUB> =3D 10325476 <BR>H<SUB><FONT =
size=3D1>4</FONT></SUB> =3D=20
  C3D2E1F0. <BR><BR>Start processing block 1. The words of block 1 are=20
  <BR><BR>W[0] =3D 61626364<BR>W[1] =3D 62636465<BR>W[2] =3D =
63646566<BR>W[3] =3D=20
  64656667<BR>W[4] =3D 65666768<BR>W[5] =3D 66676869<BR>W[6] =3D =
6768696A<BR>W[7] =3D=20
  68696A6B<BR>W[8] =3D 696A6B6C<BR>W[9] =3D 6A6B6C6D<BR>W[10] =3D =
6B6C6D6E<BR>W[11] =3D=20
  6C6D6E6F<BR>W[12] =3D 6D6E6F70<BR>W[13] =3D 6E6F7071<BR>W[14] =3D =
80000000<BR>W[15]=20
  =3D 00000000. <BR><BR>The hex values of A,B,C,D,E after pass t of the =
"for t =3D 0=20
  to 79" loop (step (d) of Section 7 or step (c) of Section 8) =
are<BR><PRE>     =20
            A           B           C           D           E

t =3D  0: 0116FC17    67452301    7BF36AE2    98BADCFE    10325476
t =3D  1: EBF3B452    0116FC17    59D148C0    7BF36AE2    98BADCFE
t =3D  2: 5109913A    EBF3B452    C045BF05    59D148C0    7BF36AE2
t =3D  3: 2C4F6EAC    5109913A    BAFCED14    C045BF05    59D148C0
t =3D  4: 33F4AE5B    2C4F6EAC    9442644E    BAFCED14    C045BF05
t =3D  5: 96B85189    33F4AE5B    0B13DBAB    9442644E    BAFCED14
t =3D  6: DB04CB58    96B85189    CCFD2B96    0B13DBAB    9442644E
t =3D  7: 45833F0F    DB04CB58    65AE1462    CCFD2B96    0B13DBAB
t =3D  8: C565C35E    45833F0F    36C132D6    65AE1462    CCFD2B96
t =3D  9: 6350AFDA    C565C35E    D160CFC3    36C132D6    65AE1462
t =3D 10: 8993EA77    6350AFDA    B15970D7    D160CFC3    36C132D6
t =3D 11: E19ECAA2    8993EA77    98D42BF6    B15970D7    D160CFC3
t =3D 12: 8603481E    E19ECAA2    E264FA9D    98D42BF6    B15970D7
t =3D 13: 32F94A85    8603481E    B867B2A8    E264FA9D    98D42BF6
t =3D 14: B2E7A8BE    32F94A85    A180D207    B867B2A8    E264FA9D
t =3D 15: 42637E39    B2E7A8BE    4CBE52A1    A180D207    B867B2A8
t =3D 16: 6B068048    42637E39    ACB9EA2F    4CBE52A1    A180D207
t =3D 17: 426B9C35    6B068048    5098DF8E    ACB9EA2F    4CBE52A1
t =3D 18: 944B1BD1    426B9C35    1AC1A012    5098DF8E    ACB9EA2F
t =3D 19: 6C445652    944B1BD1    509AE70D    1AC1A012    5098DF8E
t =3D 20: 95836DA5    6C445652    6512C6F4    509AE70D    1AC1A012
t =3D 21: 09511177    95836DA5    9B111594    6512C6F4    509AE70D
t =3D 22: E2B92DC4    09511177    6560DB69    9B111594    6512C6F4
t =3D 23: FD224575    E2B92DC4    C254445D    6560DB69    9B111594
t =3D 24: EEB82D9A    FD224575    38AE4B71    C254445D    6560DB69
t =3D 25: 5A142C1A    EEB82D9A    7F48915D    38AE4B71    C254445D
t =3D 26: 2972F7C7    5A142C1A    BBAE0B66    7F48915D    38AE4B71
t =3D 27: D526A644    2972F7C7    96850B06    BBAE0B66    7F48915D
t =3D 28: E1122421    D526A644    CA5CBDF1    96850B06    BBAE0B66
t =3D 29: 05B457B2    E1122421    3549A991    CA5CBDF1    96850B06
t =3D 30: A9C84BEC    05B457B2    78448908    3549A991    CA5CBDF1
t =3D 31: 52E31F60    A9C84BEC    816D15EC    78448908    3549A991
t =3D 32: 5AF3242C    52E31F60    2A7212FB    816D15EC    78448908
t =3D 33: 31C756A9    5AF3242C    14B8C7D8    2A7212FB    816D15EC
t =3D 34: E9AC987C    31C756A9    16BCC90B    14B8C7D8    2A7212FB
t =3D 35: AB7C32EE    E9AC987C    4C71D5AA    16BCC90B    14B8C7D8
t =3D 36: 5933FC99    AB7C32EE    3A6B261F    4C71D5AA    16BCC90B
t =3D 37: 43F87AE9    5933FC99    AADF0CBB    3A6B261F    4C71D5AA
t =3D 38: 24957F22    43F87AE9    564CFF26    AADF0CBB    3A6B261F
t =3D 39: ADEB7478    24957F22    50FE1EBA    564CFF26    AADF0CBB
t =3D 40: D70E5010    ADEB7478    89255FC8    50FE1EBA    564CFF26
t =3D 41: 79BCFB08    D70E5010    2B7ADD1E    89255FC8    50FE1EBA
t =3D 42: F9BCB8DE    79BCFB08    35C39404    2B7ADD1E    89255FC8
t =3D 43: 633E9561    F9BCB8DE    1E6F3EC2    35C39404    2B7ADD1E
t =3D 44: 98C1EA64    633E9561    BE6F2E37    1E6F3EC2    35C39404
t =3D 45: C6EA241E    98C1EA64    58CFA558    BE6F2E37    1E6F3EC2
t =3D 46: A2AD4F02    C6EA241E    26307A99    58CFA558    BE6F2E37
t =3D 47: C8A69090    A2AD4F02    B1BA8907    26307A99    58CFA558
t =3D 48: 88341600    C8A69090    A8AB53C0    B1BA8907    26307A99
t =3D 49: 7E846F58    88341600    3229A424    A8AB53C0    B1BA8907
t =3D 50: 86E358BA    7E846F58    220D0580    3229A424    A8AB53C0
t =3D 51: 8D2E76C8    86E358BA    1FA11BD6    220D0580    3229A424
t =3D 52: CE892E10    8D2E76C8    A1B8D62E    1FA11BD6    220D0580
t =3D 53: EDEA95B1    CE892E10    234B9DB2    A1B8D62E    1FA11BD6
t =3D 54: 36D1230A    EDEA95B1    33A24B84    234B9DB2    A1B8D62E
t =3D 55: 776C3910    36D1230A    7B7AA56C    33A24B84    234B9DB2
t =3D 56: A681B723    776C3910    8DB448C2    7B7AA56C    33A24B84
t =3D 57: AC0A794F    A681B723    1DDB0E44    8DB448C2    7B7AA56C
t =3D 58: F03D3782    AC0A794F    E9A06DC8    1DDB0E44    8DB448C2
t =3D 59: 9EF775C3    F03D3782    EB029E53    E9A06DC8    1DDB0E44
t =3D 60: 36254B13    9EF775C3    BC0F4DE0    EB029E53    E9A06DC8
t =3D 61: 4080D4DC    36254B13    E7BDDD70    BC0F4DE0    EB029E53
t =3D 62: 2BFAF7A8    4080D4DC    CD8952C4    E7BDDD70    BC0F4DE0
t =3D 63: 513F9CA0    2BFAF7A8    10203537    CD8952C4    E7BDDD70
t =3D 64: E5895C81    513F9CA0    0AFEBDEA    10203537    CD8952C4
t =3D 65: 1037D2D5    E5895C81    144FE728    0AFEBDEA    10203537
t =3D 66: 14A82DA9    1037D2D5    79625720    144FE728    0AFEBDEA
t =3D 67: 6D17C9FD    14A82DA9    440DF4B5    79625720    144FE728
t =3D 68: 2C7B07BD    6D17C9FD    452A0B6A    440DF4B5    79625720
t =3D 69: FDF6EFFF    2C7B07BD    5B45F27F    452A0B6A    440DF4B5
t =3D 70: 112B96E3    FDF6EFFF    4B1EC1EF    5B45F27F    452A0B6A
t =3D 71: 84065712    112B96E3    FF7DBBFF    4B1EC1EF    5B45F27F
t =3D 72: AB89FB71    84065712    C44AE5B8    FF7DBBFF    4B1EC1EF
t =3D 73: C5210E35    AB89FB71    A10195C4    C44AE5B8    FF7DBBFF
t =3D 74: 352D9F4B    C5210E35    6AE27EDC    A10195C4    C44AE5B8
t =3D 75: 1A0E0E0A    352D9F4B    7148438D    6AE27EDC    A10195C4
t =3D 76: D0D47349    1A0E0E0A    CD4B67D2    7148438D    6AE27EDC
t =3D 77: AD38620D    D0D47349    86838382    CD4B67D2    7148438D
t =3D 78: D3AD7C25    AD38620D    74351CD2    86838382    CD4B67D2
t =3D 79: 8CE34517    D3AD7C25    6B4E1883    74351CD2    86838382.
</PRE><BR>Block 1 has been processed. The values of {H<SUB><FONT=20
  size=3D1>i</FONT></SUB>} are <BR><BR>H<SUB><FONT =
size=3D1>0</FONT></SUB> =3D=20
  67452301 + 8CE34517 =3D F4286818 <BR>H<SUB><FONT =
size=3D1>1</FONT></SUB> =3D=20
  EFCDAB89 + D3AD7C25 =3D C37B27AE <BR>H<SUB><FONT =
size=3D1>2</FONT></SUB> =3D=20
  98BADCFE + 6B4E1883 =3D 0408F581 <BR>H<SUB><FONT =
size=3D1>3</FONT></SUB> =3D=20
  10325476 + 74351CD2 =3D 84677148 <BR>H<SUB><FONT =
size=3D1>4</FONT></SUB> =3D=20
  C3D2E1F0 + 86838382 =3D 4A566572. <BR><BR>Start processing block 2. =
The words of=20
  block 2 are <BR><BR>W[0] =3D 00000000<BR>W[1] =3D 00000000<BR>W[2] =3D =

  00000000<BR>W[3] =3D 00000000<BR>W[4] =3D 00000000<BR>W[5] =3D =
00000000<BR>W[6] =3D=20
  00000000<BR>W[7] =3D 00000000<BR>W[8] =3D 00000000<BR>W[9] =3D =
00000000<BR>W[10] =3D=20
  00000000<BR>W[11] =3D 00000000<BR>W[12] =3D 00000000<BR>W[13] =3D =
00000000<BR>W[14]=20
  =3D 00000000<BR>W[15] =3D 000001C0. <BR><BR>The hex values of =
A,B,C,D,E after pass=20
  t of the for "t =3D 0 to 79" loop (step (d) of Section 7 or step (c) =
of Section=20
  8) are<BR><PRE>      =20
            A           B           C           D           E

t =3D  0: 2DF257E9    F4286818    B0DEC9EB    0408F581    84677148
t =3D  1: 4D3DC58F    2DF257E9    3D0A1A06    B0DEC9EB    0408F581
t =3D  2: C352BB05    4D3DC58F    4B7C95FA    3D0A1A06    B0DEC9EB
t =3D  3: EEF743C6    C352BB05    D34F7163    4B7C95FA    3D0A1A06
t =3D  4: 41E34277    EEF743C6    70D4AEC1    D34F7163    4B7C95FA
t =3D  5: 5443915C    41E34277    BBBDD0F1    70D4AEC1    D34F7163
t =3D  6: E7FA0377    5443915C    D078D09D    BBBDD0F1    70D4AEC1
t =3D  7: C6946813    E7FA0377    1510E457    D078D09D    BBBDD0F1
t =3D  8: FDDE1DE1    C6946813    F9FE80DD    1510E457    D078D09D
t =3D  9: B8538ACA    FDDE1DE1    F1A51A04    F9FE80DD    1510E457
t =3D 10: 6BA94F63    B8538ACA    7F778778    F1A51A04    F9FE80DD
t =3D 11: 43A2792F    6BA94F63    AE14E2B2    7F778778    F1A51A04
t =3D 12: FECD7BBF    43A2792F    DAEA53D8    AE14E2B2    7F778778
t =3D 13: A2604CA8    FECD7BBF    D0E89E4B    DAEA53D8    AE14E2B2
t =3D 14: 258B0BAA    A2604CA8    FFB35EEF    D0E89E4B    DAEA53D8
t =3D 15: D9772360    258B0BAA    2898132A    FFB35EEF    D0E89E4B
t =3D 16: 5507DB6E    D9772360    8962C2EA    2898132A    FFB35EEF
t =3D 17: A51B58BC    5507DB6E    365DC8D8    8962C2EA    2898132A
t =3D 18: C2EB709F    A51B58BC    9541F6DB    365DC8D8    8962C2EA
t =3D 19: D8992153    C2EB709F    2946D62F    9541F6DB    365DC8D8
t =3D 20: 37482F5F    D8992153    F0BADC27    2946D62F    9541F6DB
t =3D 21: EE8700BD    37482F5F    F6264854    F0BADC27    2946D62F
t =3D 22: 9AD594B9    EE8700BD    CDD20BD7    F6264854    F0BADC27
t =3D 23: 8FBAA5B9    9AD594B9    7BA1C02F    CDD20BD7    F6264854
t =3D 24: 88FB5867    8FBAA5B9    66B5652E    7BA1C02F    CDD20BD7
t =3D 25: EEC50521    88FB5867    63EEA96E    66B5652E    7BA1C02F
t =3D 26: 50BCE434    EEC50521    E23ED619    63EEA96E    66B5652E
t =3D 27: 5C416DAF    50BCE434    7BB14148    E23ED619    63EEA96E
t =3D 28: 2429BE5F    5C416DAF    142F390D    7BB14148    E23ED619
t =3D 29: 0A2FB108    2429BE5F    D7105B6B    142F390D    7BB14148
t =3D 30: 17986223    0A2FB108    C90A6F97    D7105B6B    142F390D
t =3D 31: 8A4AF384    17986223    028BEC42    C90A6F97    D7105B6B
t =3D 32: 6B629993    8A4AF384    C5E61888    028BEC42    C90A6F97
t =3D 33: F15F04F3    6B629993    2292BCE1    C5E61888    028BEC42
t =3D 34: 295CC25B    F15F04F3    DAD8A664    2292BCE1    C5E61888
t =3D 35: 696DA404    295CC25B    FC57C13C    DAD8A664    2292BCE1
t =3D 36: CEF5AE12    696DA404    CA573096    FC57C13C    DAD8A664
t =3D 37: 87D5B80C    CEF5AE12    1A5B6901    CA573096    FC57C13C
t =3D 38: 84E2A5F2    87D5B80C    B3BD6B84    1A5B6901    CA573096
t =3D 39: 03BB6310    84E2A5F2    21F56E03    B3BD6B84    1A5B6901
t =3D 40: C2D8F75F    03BB6310    A138A97C    21F56E03    B3BD6B84
t =3D 41: BFB25768    C2D8F75F    00EED8C4    A138A97C    21F56E03
t =3D 42: 28589152    BFB25768    F0B63DD7    00EED8C4    A138A97C
t =3D 43: EC1D3D61    28589152    2FEC95DA    F0B63DD7    00EED8C4
t =3D 44: 3CAED7AF    EC1D3D61    8A162454    2FEC95DA    F0B63DD7
t =3D 45: C3D033EA    3CAED7AF    7B074F58    8A162454    2FEC95DA
t =3D 46: 7316056A    C3D033EA    CF2BB5EB    7B074F58    8A162454
t =3D 47: 46F93B68    7316056A    B0F40CFA    CF2BB5EB    7B074F58
t =3D 48: DC8E7F26    46F93B68    9CC5815A    B0F40CFA    CF2BB5EB
t =3D 49: 850D411C    DC8E7F26    11BE4EDA    9CC5815A    B0F40CFA
t =3D 50: 7E4672C0    850D411C    B7239FC9    11BE4EDA    9CC5815A
t =3D 51: 89FBD41D    7E4672C0    21435047    B7239FC9    11BE4EDA
t =3D 52: 1797E228    89FBD41D    1F919CB0    21435047    B7239FC9
t =3D 53: 431D65BC    1797E228    627EF507    1F919CB0    21435047
t =3D 54: 2BDBB8CB    431D65BC    05E5F88A    627EF507    1F919CB0
t =3D 55: 6DA72E7F    2BDBB8CB    10C7596F    05E5F88A    627EF507
t =3D 56: A8495A9B    6DA72E7F    CAF6EE32    10C7596F    05E5F88A
t =3D 57: E785655A    A8495A9B    DB69CB9F    CAF6EE32    10C7596F
t =3D 58: 5B086C42    E785655A    EA1256A6    DB69CB9F    CAF6EE32
t =3D 59: A65818F7    5B086C42    B9E15956    EA1256A6    DB69CB9F
t =3D 60: 7AAB101B    A65818F7    96C21B10    B9E15956    EA1256A6
t =3D 61: 93614C9C    7AAB101B    E996063D    96C21B10    B9E15956
t =3D 62: F66D9BF4    93614C9C    DEAAC406    E996063D    96C21B10
t =3D 63: D504902B    F66D9BF4    24D85327    DEAAC406    E996063D
t =3D 64: 60A9DA62    D504902B    3D9B66FD    24D85327    DEAAC406
t =3D 65: 8B687819    60A9DA62    F541240A    3D9B66FD    24D85327
t =3D 66: 083E90C3    8B687819    982A7698    F541240A    3D9B66FD
t =3D 67: F6226BBF    083E90C3    62DA1E06    982A7698    F541240A
t =3D 68: 76C0563B    F6226BBF    C20FA430    62DA1E06    982A7698
t =3D 69: 989DD165    76C0563B    FD889AEF    C20FA430    62DA1E06
t =3D 70: 8B2C7573    989DD165    DDB0158E    FD889AEF    C20FA430
t =3D 71: AE1B8E7B    8B2C7573    66277459    DDB0158E    FD889AEF
t =3D 72: CA1840DE    AE1B8E7B    E2CB1D5C    66277459    DDB0158E
t =3D 73: 16F3BABB    CA1840DE    EB86E39E    E2CB1D5C    66277459
t =3D 74: D28D83AD    16F3BABB    B2861037    EB86E39E    E2CB1D5C
t =3D 75: 6BC02DFE    D28D83AD    C5BCEEAE    B2861037    EB86E39E
t =3D 76: D3A6E275    6BC02DFE    74A360EB    C5BCEEAE    B2861037
t =3D 77: DA955482    D3A6E275    9AF00B7F    74A360EB    C5BCEEAE
t =3D 78: 58C0AAC0    DA955482    74E9B89D    9AF00B7F    74A360EB
t =3D 79: 906FD62C    58C0AAC0    B6A55520    74E9B89D    9AF00B7F.
</PRE><BR>Block 2 has been processed. The values of {H<SUB><FONT=20
  size=3D1>i</FONT></SUB>} are <BR><BR>H<SUB><FONT =
size=3D1>0</FONT></SUB> =3D=20
  F4286818 + 906FD62C =3D 84983E44 <BR>H<SUB><FONT =
size=3D1>1</FONT></SUB> =3D=20
  C37B27AE + 58C0AAC0 =3D 1C3BD26E <BR>H<SUB><FONT =
size=3D1>2</FONT></SUB> =3D=20
  0408F581 + B6A55520 =3D BAAE4AA1 <BR>H<SUB><FONT =
size=3D1>3</FONT></SUB> =3D=20
  84677148 + 74E9B89D =3D F95129E5 <BR>H<SUB><FONT =
size=3D1>4</FONT></SUB> =3D=20
  4A566572 + 9AF00B7F =3D E54670F1. <BR><BR>Message digest =3D 84983E44 =
1C3BD26E=20
  BAAE4AA1 F95129E5 E54670F1 <BR><BR>
  <UL></UL></DD></DL>
<CENTER><B>APPENDIX C. A THIRD SAMPLE MESSAGE AND ITS MESSAGE=20
DIGEST</B></CENTER><BR><BR>This appendix is for informational purposes =
only and=20
is not required to meet the standard. <BR><BR>Let the message be the=20
binary-coded form of the ASCII string which consists of 1,000,000 =
repetitions of=20
"a". <BR><BR>Message digest =3D 34AA973C D4C4DAA4 F61EEB2B DBAD2731 =
6534016F=20
<UL></UL>
<DL></DL>
<P></P><BR>
<HR>
<A name=3DFORE_SEC>
<CENTER><B>The Foreword, Abstract, and Key Words follow: =
</B><BR></CENTER>
<P>FIPS PUB 180-1<BR>FEDERAL INFORMATION<BR>PROCESSING STANDARDS=20
PUBLICATION<BR><BR>1995 April 17<BR>U.S. DEPARTMENT OF COMMERCE/National =

Institute of Standards and Technology <BR><BR>
<H2>
<CENTER>SECURE HASH STANDARD</H2></CENTER>U.S. DEPARTMENT OF COMMERCE, =
Ronald H.=20
Brown, <I>Secretary</I><BR>National Institute of Standards and =
Technology, Arati=20
Prabhakar, <I>Director</I> <BR><BR>
<CENTER><B>Foreword</B></CENTER>The Federal Information Processing =
Standards=20
Publication Series of the National Institute of Standards and Technology =
(NIST)=20
is the official publication relating to standards and guidelines adopted =
and=20
promulgated under the provisions of Section 111(d) of the Federal =
Property and=20
Administrative Services Act of 1949 as amended by the Computer Security =
Act of=20
1987, Public Law 100-235. These mandates have given the Secretary of =
Commerce=20
and NIST important responsibilities for improving the utilization and =
management=20
of computers and related telecommunications systems in the Federal =
Government.=20
The NIST, through its Computer Systems Laboratory, provides leadership,=20
technical guidance, and coordination of Government efforts in the =
development of=20
standards and guidelines in these areas. <BR><BR>Comments concerning =
Federal=20
Information Processing Standards Publications are welcomed and should be =

addressed to the Director, Computer Systems Laboratory, National =
Institute of=20
Standards and Technology, Gaithersburg, MD 20899. <BR><BR>James H. =
Burrows,=20
<I>Director</I><BR>Computer Systems Laboratory<BR><BR>
<CENTER><B>Abstract</CENTER></B>This standard specifies a Secure Hash =
Algorithm=20
(SHA-1) which can be used to generate a condensed representation of a =
message=20
called a message digest. The SHA-1 is required for use with the Digital=20
Signature Algorithm (DSA) as specified in the Digital Signature Standard =
(DSS)=20
and whenever a secure hash algorithm is required for Federal =
applications. The=20
SHA-1 is used by both the transmitter and intended receiver of a message =
in=20
computing and verifying a digital signature. <BR><BR><B>Key words:</B> =
computer=20
security; digital signatures; Federal Information Processing Standard =
(FIPS);=20
hash algorithm.
<P></P><BR>
<HR>
<BR>
<CENTER>
<MENU>Go Back to the<A=20
  href=3D"http://www.itl.nist.gov/fipspubs/fip180-1.htm#FIPS_TOP">=20
Top</A>.</MENU>Return to the FIPS<BR><A=20
href=3D"http://www.itl.nist.gov/fipspubs/index.htm" =
target=3D'_top"'>Home=20
Page</A></CENTER><BR>
<HR>
<BR></BODY></HTML>

------=_NextPart_000_0000_01C75BF9.784BB400
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.itl.nist.gov/fipspubs/fip180-1.gif

R0lGODlhDwJQAfcAAAAAAL8AAAC/AL+/AAAAv78AvwC/v8DAwMDcwKTI8AAAAAAAMwAAZgAAmQAA
zAAA/wAzAAAzMwAzZgAzmQAzzAAz/wBmAABmMwBmZgBmmQBmzABm/wCZAACZMwCZZgCZmQCZzACZ
/wDMAADMMwDMZgDMmQDMzADM/wD/AAD/MwD/ZgD/mQD/zAD//zMAADMAMzMAZjMAmTMAzDMA/zMz
ADMzMzMzZjMzmTMzzDMz/zNmADNmMzNmZjNmmTNmzDNm/zOZADOZMzOZZjOZmTOZzDOZ/zPMADPM
MzPMZjPMmTPMzDPM/zP/ADP/MzP/ZjP/mTP/zDP//2YAAGYAM2YAZmYAmWYAzGYA/2YzAGYzM2Yz
ZmYzmWYzzGYz/2ZmAGZmM2ZmZmZmmWZmzGZm/2aZAGaZM2aZZmaZmWaZzGaZ/2bMAGbMM2bMZmbM
mWbMzGbM/2b/AGb/M2b/Zmb/mWb/zGb//8DAwAAAfwB/AAB/f38/AAAfPwA/Xw8PDx8fHx9ff9+f
f9/f3+/v7/+/n//fv3+//38AAH8Af39/AH9/f5kAAJkAM5kAZpkAmZkAzJkA/5kzAJkzM5kzZpkz
mZkzzJkz/5lmAJlmM5lmZplmmZlmzJlm/5mZAJmZM5mZZpmZmZmZzJmZ/5nMAJnMM5nMZpnMmZnM
zJnM/5n/AJn/M5n/Zpn/mZn/zJn//8wAAMwAM8wAZswAmcwAzMwA/8wzAMwzM8wzZswzmcwzzMwz
/8xmAMxmM8xmZsxmmcxmzMxm/8yZAMyZM8yZZsyZmcyZzMyZ/8zMAMzMM8zMZszMmczMzMzM/8z/
AMz/M8z/Zsz/mcz/zMz///8AAP8AM/8AZv8Amf8AzP8A//8zAP8zM/8zZv8zmf8zzP8z//9mAP9m
M/9mZv9mmf9mzP9m//+ZAP+ZM/+ZZv+Zmf+ZzP+Z///MAP/MM//MZv/Mmf/MzP/M////AP//M///
Zv//mf//zP/////78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////ywAAAAADwJQAQcI/AD/CRxI
sKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaPHjyBDihxJsqTJkyhTqlzJsqXLlzBjypxJs6bN
mzhz6tzJs6fPn0CDCh1KtKjRo0iTKl3KtKnTp1CjSp1KtarVq1izat3KtavXr2DDih1LtqzZs2jT
ql3Ltq3bt3Djyp1Lt67du3jz6t3Lt6/fv4ADCx5MuLBOBYgTK17MuLHjx5AjS55MubLly5gza96M
2SDnz6BDix5NurRpyxVPq17NurXr15MJwp5Nu7bt248pIq7Hu7fv38CDCx/eezfx48iTK1/OvLnz
58iNQ1+OWLaC6dh9497OXXT25vvVJ0r/Pn08+fPo06t/bn497/AC27snLn++/fv4mdefDz/i/vzF
XQfggAQWGCCA/f2HoIAGNuigegpCqIBuDD5YT30AZFgPAL1piB6H9mUIIogFkrihic5FSF6CFTqo
ooUwxgjci+f1BxGN9snnoYcnpofihySK2KCJPLLXIn8TDoSje0vK6KSLR95n40NNrqdjkPMV6SOK
P+KnZXZVpphkfFEWOJ6QQXY5nZrYiZgmm8EV6eaXyaVZXplIUijjlVzyOKebPXYoJG9znsjhoGi+
+SOdvgGa6G+OarjjoIZK6ieilgYXJnhj/rNpjQxOKqiP7mkJZ5x2AuqcnfvQfSqmnjFiaOqItBKa
aaCXNlqrrYfa6quuxIn66K+W9irqr8TuOqx2eKbHYqyhYlnqqdCZ2ia1xzEqppmd3tjsgPtRiquy
uwrKarKjAhtousIJW667qJ47LrrrHpjfszBKJ66h5v5Zr6qVHlosr+sCrO6GkCYqML+VMswrrZf6
+zDBX7rKKaz5Rglxusce22OuHMsbcJ+6Thopsv7OWjCR5NLL7ILWQVtywvQO67Gc70rqMrss+4om
yudmejOrHd9qL7jdUvntgnHyrGjILuMMNM3DSY1s1CRDfXXRO7+39IqdWgxmi+JyPe/MW+dMNZ06
q2v01HAnHHTLZ/sfDbN4X+N3Jdxdmp0r3fUWDJzVgg/d4b9q0232y/eGnXeOoRJcM+BGWw1yv2z3
WvKycV/u89yTX33h42BjbKGODkequsAQU4rz6nKzWejmDbuuMMsAm9z6xPuKHZ3jMhPqdL9aG651
4NpKfrDol3tu/NmLe82t6Q+G+Se2T2bP6d1kBl/3jqiG7jPWVCMcfvkLH9z8iN8bq3i50hM4pUO+
Y2c9pNrnDyr3npLOZOS2K9btGCYxxMGOdu3q2wB5t8DUze5jmNKdw0Y3PbztyX+bw57+Njic+tEH
eBljzvU4SMI7VVAiHmwVBkvIwrHxL4XbWg6XWkjD5MDwg/vUg1INdwi5F67QWf57IA+HaLfG5bBB
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
PLxgxVwIxSgaaIq6q2LsRojELGLpjPfTFB3PpyARJvF5+ltZDh1oPh4OsIwPZNcL21gcgvkHesZj
VK28Fyvw+81qh7260Z7gxJ9X2QpxPRxRyLCnufCB0pLkU1V13LfIQ9FNJ8li5bmcaK9YFsuVOTld
LVczy4Tp0m4U1Mq3fEmSVQ5TRbc0Jl+KmcwYloyZS1rmM42DTGnCJZrVVA01sbkWrRnFm98EZzjF
OU5yltOc50RnOtW5Tna2053vTAw85TlPetbTnvfEZz7BuUZ99tOf/wRoQAVqlLQM1KAHRWhCFcpL
CDbUoQ+FaEQlOlGKVtSiF8VoRjW6UY521KMfBWlIRTpSkpbUpCdFaUpVulKWttSlL4VpTGU6U5rW
1KY3xWlOdbpTnvbUpz8FalCFOlSiFtWoR0VqUpW6cVSmNtWpT4VqVKU6VapW1apXxWpWtbpVrnbV
q18Fa1jFOlayltWsZ0VrWtW6Vra21a1vhWtc5TpXutbVrnfFa171ule+9tWvfwVsYAU7WMIW1rCH
RWxiFbtYxjbWsY+FbGQlO1nKVtayl8VsZjVb2YAAACH+5VRoaXMgZmlsZSB3YXMgY3JlYXRlZCBi
eSAgICANDUdyYXBoaWMgV29ya3Nob3AgZm9yIFdpbmRvd3MgMS4xdQ0NZnJvbSBBbGNoZW15IE1p
bmR3b3JrcyBJbmMuDVAuTy4gQm94IDUwMA1CZWV0b24sIE9udGFyaW8NTDBHIDFBMCBDQU5BREEN
DVRoaXMgaW1hZ2UgbWF5IGhhdmUgYmVlbiBjcmVhdGVkIGJ5DWEgcGFydHkgb3RoZXIgdGhhbiBB
bGNoZW15IE1pbmR3b3JrcyBJbmMuDQ1Vc2Ugbm8gaG9va3MAOw==

------=_NextPart_000_0000_01C75BF9.784BB400--
